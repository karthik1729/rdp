var Channel, Connection, Flow, Message, StateBus, System;

System = (function() {
  function System(name, flow) {
    this.name = name;
    this.flow = flow;
    this.handlers = {};
  }

  System.prototype.push = function(inlet, data) {};

  System.prototype.whenReady = function(outelt, handler) {
    if (this.handlers.outlet === null) {
      return this.handlers.outlet = [handler];
    } else {
      return this.handlers.outlet.push(handler);
    }
  };

  System.prototype.emit = function() {};

  System.prototype.serialize = function() {
    return "<system name=\"" + this.name + "\" />";
  };

  return System;

})();

Channel = (function() {
  function Channel(inlet, outlet) {
    this.inlet = inlet;
    this.outlet = outlet;
  }

  Channel.prototype.serialize = function() {
    return "<channel inlet='" + this.inlet + "', outlet='" + this.outlet + "'/>";
  };

  return Channel;

})();

Connection = (function() {
  function Connection(name, source, sink, channels) {
    this.name = name;
    this.source = source;
    this.sink = sink;
    this.channels = channels;
  }

  Connection.prototype.serialize = function() {
    var channel, xml, _i, _len, _ref;
    xml = "<connection name='" + this.name + "'>\"\n    " + (this.source.serialize()) + "\n    " + (this.sink.serialize());
    xml += "<channels>";
    _ref = this.channels;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      channel = _ref[_i];
      xml += channel.serialize();
    }
    return xml += "    </channels>\n</connection>";
  };

  return Connection;

})();

Message = (function() {
  function Message(event, payload) {
    this.event = event;
    this.payload = payload;
  }

  return Message;

})();

StateBus = (function() {
  function StateBus() {
    this.entities = {};
    this.discreteSystems = {};
  }

  StateBus.prototype.addEntity = function(entity) {
    return this.entities[entiy.name] = entity;
  };

  addDiscreteSystem(discrete_system, events)(function() {
    var event, _i, _len;
    for (_i = 0, _len = events.length; _i < _len; _i++) {
      event = events[_i];
      if (this.discreteSystems[event].systems === null) {
        this.discreteSystems[event].systems = [discrete_system];
      } else {
        this.discreteSystems[event].systems.append(discrete_system);
      }
    }
    return {
      trigger: function(event, message) {
        var system, _j, _len1, _ref, _results;
        _ref = this.discreteSystems[event];
        _results = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          system = _ref[_j];
          message = -Message(event, message);
          _results.push(system.raise(message));
        }
        return _results;
      }
    };
  });

  return StateBus;

})();

Flow = (function() {
  function Flow() {
    this.connections = [];
    this.objectStore = new ObjectStore;
    this.bus = new StateBus;
    this.systems = {};
  }

  Flow.prototype.addSystem = function(name, inlets, outlets) {
    return this.systems[name] = system;
  };

  Flow.prototype.connect = function(connection) {
    return this.connections[connection.name] = connection;
  };

  Flow.prototype.serialize = function() {
    var connection, xml, _i, _len, _ref;
    xml = "<xml>";
    xml += "<flow name='" + this.name + "'>";
    _ref = this.connections;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      connection = _ref[_i];
      xml += "<connection>";
      xml += connection.serialize();
      xml += "</connection>";
    }
    xml = "</flow>";
    return xml = "</xml>";
  };

  Flow.prototype.start = function() {
    var A, B, channel, connection, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = connections.length; _i < _len; _i++) {
      connection = connections[_i];
      A = connection.from;
      B = connection.to;
      _results.push((function() {
        var _j, _len1, _ref, _results1;
        _ref = connection.channels;
        _results1 = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          channel = _ref[_j];
          _results1.push(A.whenReady(A.channel.outlet, function(data) {
            return B.push(inlet, data);
          }));
        }
        return _results1;
      })());
    }
    return _results;
  };

  return Flow;

})();

exports.System = System;

exports.Channel = Channel;

exports.Connection = Connection;

exports.Message = Message;

exports.StateBus = StateBus;

exports.Flow = Flow;

//# sourceMappingURL=data:application/json;base64,