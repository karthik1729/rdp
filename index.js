var Channel, Connection, Entity, Flow, Message, StateBus, System;

System = (function() {
  function System(name, flow) {
    this.name = name;
    this.flow = flow;
    this.handlers = null;
  }

  System.prototype.push = function(data, inlet) {};

  System.prototype.whenReady = function(handler, outlet) {
    if (!outlet) {
      if (this.handlers === null) {
        return this.handlers.push(handler);
      } else {
        return this.handlers = [handler];
      }
    } else {
      if (this.handlers === null) {
        return this.handlers.outlet = [handler];
      } else {
        return this.handlers.outlet.push(handler);
      }
    }
  };

  System.prototype.emit = function(data, outlet) {
    var handler, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
    if (!outlet) {
      _ref = this.handlers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        handler = _ref[_i];
        _results.push(handler(data));
      }
      return _results;
    } else {
      _ref1 = this.handlers[outlet];
      _results1 = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        handler = _ref1[_j];
        _results1.push(handler(data));
      }
      return _results1;
    }
  };

  System.prototype.serialize = function() {
    return "<system name=\"" + this.name + "\" />";
  };

  return System;

})();

Channel = (function() {
  function Channel(inlet, outlet) {
    this.inlet = inlet;
    this.outlet = outlet;
  }

  Channel.prototype.serialize = function() {
    return "<channel inlet='" + this.inlet + "', outlet='" + this.outlet + "'/>";
  };

  return Channel;

})();

Connection = (function() {
  function Connection(name, flow, source, sink, channels) {
    var channel, self, _i, _len, _ref;
    this.name = name;
    this.flow = flow;
    this.channels = channels;
    self = this;
    this.source = this.flow.getSystem(source);
    this.sink = this.flow.getSystem(sink);
    this.flow.log("" + this.source.name + " ---> " + this.name + " ---> " + this.sink.name);
    if (this.channels) {
      _ref = this.channels;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        channel = _ref[_i];
        this.source.prototype.whenReady((function(data) {
          return self.sink.prototype.push(channel.inlet, data);
        }), channel.outlet);
      }
    } else {
      this.source.prototype.whenReady(function(data) {
        return self.sink.prototype.push(data);
      });
    }
  }

  Connection.prototype.serialize = function() {
    var channel, xml, _i, _len, _ref;
    xml = "<connection name='" + this.name + "'>\n    " + (this.source.serialize()) + "\n    " + (this.sink.serialize());
    if (this.channels) {
      xml += "<channels>";
      _ref = this.channels;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        channel = _ref[_i];
        xml += channel.serialize();
      }
      xml += "</channels>";
    }
    return xml += "</connection>";
  };

  return Connection;

})();

Message = (function() {
  function Message(event, payload) {
    this.event = event;
    this.payload = payload;
  }

  return Message;

})();

Entity = (function() {
  function Entity(name) {
    this.name = name;
  }

  return Entity;

})();

StateBus = (function() {
  function StateBus() {
    this.entities = {};
    this.discreteSystems = {};
  }

  StateBus.prototype.createEntity = function(name) {
    this.entities[name] = new Entity(name);
    return this.entities[name];
  };

  StateBus.prototype.getEntity = function(name, create) {
    if (this.entities[name]) {
      return this.entities[name];
    } else if (create) {
      return this.createEntity(name);
    } else {
      return null;
    }
  };

  StateBus.prototype.addDiscreteSystem = function(discrete_system, events) {
    var event, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = events.length; _i < _len; _i++) {
      event = events[_i];
      if (this.discreteSystems[event].systems === null) {
        _results.push(this.discreteSystems[event].systems = [discrete_system]);
      } else {
        _results.push(this.discreteSystems[event].systems.append(discrete_system));
      }
    }
    return _results;
  };

  StateBus.prototype.trigger = function(event, message) {
    var system, _i, _len, _ref, _results;
    _ref = this.discreteSystems[event];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      system = _ref[_i];
      message = -Message(event, message);
      _results.push(system.raise(message));
    }
    return _results;
  };

  return StateBus;

})();

Flow = (function() {
  function Flow() {
    this.connections = [];
    this.bus = new StateBus;
    this.systems = {};
  }

  Flow.prototype.addSystem = function(system) {
    return this.systems[system.name] = system;
  };

  Flow.prototype.getSystem = function(name) {
    return this.systems[name];
  };

  Flow.prototype.addConnection = function(connection) {
    return this.connections.push(connection);
  };

  Flow.prototype.serialize = function() {
    var connection, xml, _i, _len, _ref;
    xml = "<xml>";
    xml += "<flow name='" + this.name + "'>";
    _ref = this.connections;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      connection = _ref[_i];
      xml += "<connection>";
      xml += connection.serialize();
      xml += "</connection>";
    }
    xml = "</flow>";
    return xml = "</xml>";
  };

  Flow.prototype.log = function(x) {
    return console.log(x);
  };

  return Flow;

})();

exports.System = System;

exports.Channel = Channel;

exports.Connection = Connection;

exports.Message = Message;

exports.StateBus = StateBus;

exports.Flow = Flow;

//# sourceMappingURL=data:application/json;base64,