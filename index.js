var Channel, Component, Connection, DiscreteSystem, Entity, Event, Flow, Message, NameSpace, S, StateBus, Symbol, System, T, Token,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

NameSpace = (function() {
  function NameSpace(name, sep) {
    this.name = name;
    this.names = [];
    this.symbols = {};
    this.sep = sep || ".";
  }

  NameSpace.prototype.intern = function(symbol) {
    if (!this.symbols[symbol.name]) {
      this.names.push(symbol.name);
      this.symbols[symbol.name] = symbol;
    } else {
      this.symbols[symbol.name] = symbol;
    }
    return symbol.ns = this;
  };

  NameSpace.prototype.unintern = function(symbol) {
    var item;
    delete this.symbols[symbol.name];
    this.names = (function() {
      var _i, _len, _ref, _results;
      _ref = this.names;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item !== symbol.name) {
          _results.push(item);
        }
      }
      return _results;
    }).call(this);
    return symbol.ns = void 0;
  };

  NameSpace.prototype.getSymbol = function(name) {
    return this.symbols[name];
  };

  NameSpace.prototype.get = function(name) {
    return this.symbols[name].value;
  };

  NameSpace.prototype.allSymbols = function() {
    var name, symbols, _i, _len, _ref;
    symbols = [];
    _ref = this.names;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      symbols.push(this.symbols[name]);
    }
    return symbols;
  };

  NameSpace.prototype.all = function() {
    var name, values, _i, _len, _ref;
    values = [];
    _ref = this.names;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      values.push(this.symbols[name].value);
    }
    return values;
  };

  return NameSpace;

})();

Symbol = (function() {
  function Symbol(name, value, ns) {
    this.name = name;
    this.value = value;
    this.ns = ns;
  }

  Symbol.prototype.is = function(symbol, deep) {
    var equality, k, v, _i, _len;
    equality = {
      names: -1,
      namespaces: -1,
      attrs: -1
    };
    if (this.name === symbol.name) {
      equality.names = 1;
    }
    if (!this.ns) {
      equality.namespaces = 1;
    } else if (this.ns && this.ns.id === symbol.id) {
      equality.namespaces = 1;
    }
    equality.attrs = 1;
    for (v = _i = 0, _len = this.length; _i < _len; v = ++_i) {
      k = this[v];
      if (v !== symbol[k]) {
        equality.attrs = -1;
      }
    }
    if (deep) {
      if (equality.names === 1 && equality.namespaces === 1 && equality.attrs === 1) {
        return true;
      }
    } else {
      if (equality.names === 1 && equality.namespaces === 1) {
        return true;
      }
    }
    return false;
  };

  Symbol.prototype.toString = function() {
    if (this.ns) {
      return this.ns.id + this.ns.sep + this.name;
    } else {
      return this.name;
    }
  };

  return Symbol;

})();

S = function(name) {
  return new Symbol(name);
};

Token = (function(_super) {
  __extends(Token, _super);

  function Token(name) {
    this.name = name;
    this.value = this.name;
    if (typeof this.name === "string") {
      this[this.name] = true;
    }
  }

  return Token;

})(Symbol);

T = function(name) {
  return new Token(name);
};

Event = (function(_super) {
  __extends(Event, _super);

  function Event(name, context) {
    this.name = name;
    this.context = context;
  }

  return Event;

})(Symbol);

Message = (function(_super) {
  __extends(Message, _super);

  function Message(type, payload) {
    this.type = type;
    this.payload = payload;
    this.name = "message." + this.type;
  }

  return Message;

})(Symbol);

Entity = (function(_super) {
  __extends(Entity, _super);

  function Entity(name, tags, value) {
    this.name = name;
    this.tags = tags;
    this.value = value;
  }

  return Entity;

})(Symbol);

Component = (function(_super) {
  __extends(Component, _super);

  function Component(name, attrs) {
    var k, v, _i, _len;
    this.name = name;
    for (v = _i = 0, _len = attrs.length; _i < _len; v = ++_i) {
      k = attrs[v];
      this[k] = v;
    }
  }

  return Component;

})(Symbol);

System = (function() {
  function System(flow) {
    this.flow = flow;
    this.handlers = null;
  }

  System.prototype.push = function(data, inlet) {};

  System.prototype.whenReady = function(handler, outlet) {
    if (!outlet) {
      if (this.handlers) {
        return this.handlers.push(handler);
      } else {
        console.log(this);
        return this.handlers = [handler];
      }
    } else {
      if (this.handlers) {
        return this.handlers.outlet.push(handler);
      } else {
        return this.handlers.outlet = [handler];
      }
    }
  };

  System.prototype.emit = function(data, outlet) {
    var handler, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
    if (!outlet) {
      _ref = this.handlers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        handler = _ref[_i];
        _results.push(handler(data));
      }
      return _results;
    } else {
      _ref1 = this.handlers[outlet];
      _results1 = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        handler = _ref1[_j];
        _results1.push(handler(data));
      }
      return _results1;
    }
  };

  return System;

})();

DiscreteSystem = (function() {
  function DiscreteSystem(flow, events) {
    this.flow = flow;
    this.events = events;
  }

  DiscreteSystem.prototype.raise = function(message) {};

  return DiscreteSystem;

})();

Channel = (function() {
  function Channel(inlet, outlet) {
    this.inlet = inlet;
    this.outlet = outlet;
  }

  return Channel;

})();

Connection = (function() {
  function Connection(source, sink, flow, channels) {
    this.flow = flow;
    this.channels = channels;
    this.source = this.flow.systems.get(source);
    this.sink = this.flow.systems.get(sink);
  }

  return Connection;

})();

StateBus = (function() {
  function StateBus() {
    this.entities = new NameSpace();
    this.discreteSystems = new NameSpace();
  }

  StateBus.prototype.addDiscreteSystem = function(id, discreteSystemClass) {
    var discrete_sytem;
    discrete_sytem = new discreteSystemClass(this);
    id.value = discrete_sytem;
    return this.discreteSystems.intern(id);
  };

  StateBus.prototype.createEntity = function(name, tags, value) {
    var entity;
    tags = tags || [];
    value = value || void 0;
    entity = new Entity(name, tags, value);
    this.entities.intern(entity);
    return entity;
  };

  StateBus.prototype.getEntity = function(name, create) {
    if (this.entities.getSymbol(name)) {
      return this.entities.getSymbol(name);
    } else if (create) {
      return this.createEntity(name);
    } else {
      return null;
    }
  };

  StateBus.prototype.getEntitiesByTags = function(tags) {
    var entities, entity, tag, _i, _j, _len, _len1, _ref;
    entities = [];
    _ref = this.entities.all();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      entity = _ref[_i];
      for (_j = 0, _len1 = tags.length; _j < _len1; _j++) {
        tag = tags[_j];
        if (__indexOf.call(entity.tags, tag) >= 0) {
          entities.push(entity);
        }
      }
    }
    return entities;
  };

  StateBus.prototype.trigger = function(event, message) {
    var system, _i, _len, _ref, _results;
    _ref = this.discreteSystems[event];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      system = _ref[_i];
      message = Message(event, message);
      _results.push(system.raise(message));
    }
    return _results;
  };

  return StateBus;

})();

Flow = (function() {
  function Flow(id) {
    this.id = id;
    this.bus = new StateBus;
    this.systems = new NameSpace("systems");
    this.connections = new NameSpace("systems.connections");
  }

  Flow.prototype.connect = function(id, source, sink, channels) {
    var channel, connection, _i, _len, _ref;
    connection = new Connection(source, sink, this, channels);
    if (connection.channels) {
      _ref = connection.channels;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        channel = _ref[_i];
        connection.source.prototype.whenReady.call(connection.source, (function(data) {
          return connection.sink.prototype.push.call(connection.sink, channel.inlet, data);
        }), channel.outlet);
      }
    } else {
      connection.source.prototype.whenReady.call(connection.source, (function(data) {
        return connection.sink.push(data);
      }));
    }
    id.value = connection;
    return this.connections.intern(id);
  };

  Flow.prototype.addSystem = function(id, systemClass) {
    var system;
    system = new systemClass(this);
    id.value = system;
    return this.systems.intern(id);
  };

  Flow.prototype.serialize = function() {
    var connection, system, xml, _i, _j, _len, _len1, _ref, _ref1;
    xml = "<xml>";
    xml += "<flow name='" + this.id.name + "'>";
    _ref = this.systems.all();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      system = _ref[_i];
      xml += "<system>";
      xml += "</system>";
    }
    _ref1 = this.connections.all();
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      connection = _ref1[_j];
      xml += "<connection>";
      xml += "</connection>";
    }
    xml = "</flow>";
    return xml = "</xml>";
  };

  Flow.prototype.log = function(x) {
    return console.log(x);
  };

  return Flow;

})();

exports.Symbol = Symbol;

exports.S = S;

exports.Token = Token;

exports.T = T;

exports.NameSpace = NameSpace;

exports.System = System;

exports.Channel = Channel;

exports.Connection = Connection;

exports.Message = Message;

exports.Entity = Entity;

exports.StateBus = StateBus;

exports.Flow = Flow;

//# sourceMappingURL=data:application/json;base64,